---
- name: create userns-remap user
  user:
    name: "{{ docker_userns_remap_user }}"
    state: present
    password: "!"
    create_home: no
    shell: /usr/sbin/nologin
  when:
    - docker_userns_remap_enable
    - docker_userns_remap_user != 'default'

- name: install dependencies
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      # required by apt_key module
      - gnupg
    state: present
    force_apt_get: yes
    update_cache: yes

- name: add Docker apt key
  apt_key:
    url: "{{ docker_apt_key_url }}"
    state: present

- name: add Docker apt repository
  apt_repository:
    repo: "deb [arch={{ docker_apt_sources_arch }}] {{ docker_apt_sources_uri }} {{ docker_apt_sources_suite }} stable"
    state: present
    filename: docker

- name: install Docker CE
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
    state: present
    force_apt_get: yes
    update_cache: yes

- name: create config directory
  file:
    path: /etc/docker
    state: directory
    mode: u=rwx,g=,o=

- name: set daemon config
  template:
    src: daemon.json.j2
    dest: /etc/docker/daemon.json
    lstrip_blocks: yes
    mode: u=rw,g=,o=
  notify:
    - restart daemon

- name: start and enable daemon
  systemd:
    name: docker.service
    state: started
    enabled: yes

- name: check whether iptables rules have been changed
  import_tasks: check-iptables.yml
  when: docker_iptables_check

- name: restart on daemon config or iptables rules change
  meta: flush_handlers

- name: define non-root users
  user:
    name: "{{ user }}"
    state: present
    groups:
      - docker
    append: yes
  loop: "{{ docker_users }}"
  loop_control:
    loop_var: user
  when: docker_users is defined
